{"version":3,"sources":["index.js"],"names":["NameForm","props","state","value","handleChange","bind","changeCallback","submitHandler","event","this","setState","target","onSubmit","type","min","onChange","pattern","OwnSelect","React","Component","chosen","changeHandler","entries","push","key","desc","newText","split","map","item","i","className","name","GameCreator","gameState","words","id","onClick","createGame","Field","dimensions","getDataAxios","num","axios","require","default","get","params","number","response","data","rows","r","row","rr","Tile","word","size","ReactDOM","render","document","getElementById","divstyle","textAlign","float","width","height","style"],"mappings":"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","file":"static/js/main.3c46d71a.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\nclass NameForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: '5'};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.changeCallback = props.changeCallback.bind(this);\r\n    this.submitHandler = props.submitHandler.bind(this);\r\n  }\r\n\r\n  \r\n\r\n  handleChange(event) {\r\n    this.setState({value:event.target.value});\r\n    this.changeCallback({value:event.target.value});\r\n  }\r\n  render() {\r\n    \r\n    return (\r\n      <form onSubmit = {()=> this.submitHandler()}>\r\n        <label>\r\n          Size of field n*n:\r\n          <input type=\"text\" min = \"3\" value={this.state.value} onChange={this.handleChange } pattern=\"\\d+\"/>   \r\n          Options:\r\n          \r\n        </label>\r\n        <OwnSelect></OwnSelect>\r\n      </form> \r\n    );\r\n  }\r\n}\r\n\r\nclass OwnSelect extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chosen: \"default\"\r\n    };\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n  }\r\n  render(){\r\n    \r\n    var entries = [];\r\n    \r\n    entries.push(<option key = {0} value = \"default\">default</option>)\r\n    entries.push(<option  key = {1} value = \"sparse\">sparse</option>)\r\n    entries.push(<option  key = {2} value = \"full\">full</option>)\r\n    entries.push(<option  key = {3} value = \"minefield\">minefield</option>)\r\n\r\n    var desc = \"\";\r\n    if(this.state.chosen == \"default\"){\r\n      desc = \"68% of fields occupied \\n 4% assasins \\n example:\\n 5*5 => 17\";\r\n    }\r\n    else if(this.state.chosen == \"sparse\"){\r\n      desc = \"20% of fields occupied \\n no assasins\";\r\n    }\r\n    else if(this.state.chosen == \"full\"){\r\n      desc = \"100% of fields occupied\";\r\n    }\r\n    else if(this.state.chosen == \"minefield\"){\r\n      desc = \"68% of fields occupied \\n 22% assasins\";\r\n    }\r\n    let newText = desc.split ('\\n').map ((item, i) => <p key={i}>{item}</p>);\r\n    return (\r\n      <div>\r\n        <select  className = \"content\" onChange={this.changeHandler}>\r\n          {entries}\r\n        </select>\r\n        description:<br/>\r\n        {newText}\r\n      </div>\r\n    );\r\n  }\r\n  changeHandler(event){\r\n    \r\n    let {name, value} = event.target;\r\n    \r\n    this.setState({chosen:value});\r\n    \r\n  }\r\n}\r\n\r\n\r\nclass GameCreator extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      value: 5,\r\n      gameState:0,\r\n      words:[],\r\n    };\r\n  }\r\n  render(){\r\n    if(this.state.gameState == 0){\r\n      return(\r\n        <div id = \"container\">\r\n          <h1>\r\n            Codenames\r\n          </h1>\r\n          <button className = \"button\" onClick = {() => this.createGame()}>\r\n            Create Game\r\n          </button>\r\n          <NameForm submitHandler = {()=> this.createGame()} changeCallback = {(props)=>this.changeHandler(props)}/>\r\n        </div>\r\n      );\r\n    }\r\n    else{\r\n      return(\r\n        <div id = \"container\">\r\n          <h1>\r\n          Codenames\r\n          </h1>\r\n          <Field words = {this.state.words} dimensions = {this.state.value}></Field>\r\n        </div>\r\n        \r\n      );\r\n    }\r\n    \r\n  }\r\n  changeHandler(props){\r\n    this.setState({value:props.value})\r\n  }\r\n  createGame(){\r\n    this.setState({gameState:1});\r\n    this.getDataAxios(this.state.value);\r\n  }\r\n  async getDataAxios(num){\r\n    num = num*num;\r\n    const axios = require('axios').default;\r\n\r\n    const response =\r\n      await axios.get(\"https://random-word-api.herokuapp.com/word\",\r\n          { params: {number: num}}\r\n      )\r\n    \r\n    this.setState({words:response.data});\r\n  }\r\n}\r\n  \r\n\r\nclass Field extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      dimensions: props.dimensions,\r\n    }\r\n  }\r\n\r\n  render(){\r\n    var rows = [];\r\n    for(let r = 0;r<this.state.dimensions;r++){\r\n      let row = [];\r\n      for(let rr = 0;rr<this.state.dimensions;rr++){\r\n        row.push(<Tile word = {this.props.words[r*this.state.dimensions+rr]} size = {50/this.state.dimensions}/>);//TODO: add key\r\n      }\r\n\r\n      rows.push(\r\n        <tr>\r\n          {row}\r\n        </tr>\r\n      );\r\n    }\r\n    return(\r\n      <table>\r\n        <tbody>\r\n          {rows}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <GameCreator />,\r\n  document.getElementById('root')\r\n);\r\n  \r\n\r\n\r\nclass Tile extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n  }\r\n\r\n  render(){\r\n\r\n    let divstyle = {\r\n      textAlign: 'center',\r\n      float: 'left',\r\n    \r\n      width: this.props.size + 'vw',\r\n      height: this.props.size +'vh',\r\n    };\r\n\r\n    return(\r\n      \r\n      <td style = {divstyle}>\r\n        <button className = \"tile\" >\r\n         {this.props.word}\r\n        </button>\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n  \r\n  renderSquare(i) {\r\n    return (\r\n      <Square \r\n        value = {this.props.squares[i]}\r\n        onClick = {() => this.props.onClick(i)}\r\n      />  \r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      XIsNext: true,\r\n    };\r\n  }\r\n  handleClick(i){\r\n    const history = this.state.history.slice(0,this.state.stepNumber + 1);\r\n    const current = history[history.length-1];\r\n    const squares = current.squares.slice();\r\n \r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;    \r\n    }\r\n    squares[i] = this.state.XIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares:squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n      XIsNext: !this.state.XIsNext,\r\n    });\r\n    \r\n  }\r\n  jumpTo(i){\r\n    this.setState({\r\n      stepNumber:i,\r\n      XIsNext: (i%2) === 0,\r\n    });\r\n  }\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step,move) =>{\r\n      const desc = move ?\r\n        'Go to move #' + move:\r\n        'Go to game start';\r\n      return(\r\n        <li key ={move}>\r\n          <button onClick={() => this.jumpTo(move)}>\r\n            {desc}\r\n          </button>\r\n        </li>\r\n\r\n      );\r\n    });\r\n\r\n\r\n\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } \r\n    else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');    \r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares = {current.squares}\r\n            onClick = {(i)=>this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n  \r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n*/"],"sourceRoot":""}