{"version":3,"sources":["index.js"],"names":["NameForm","props","state","value","handleChange","bind","event","this","setState","target","onSubmit","handleSubmit","type","min","onChange","pattern","OwnSelect","React","Component","chosen","changeHandler","entries","push","desc","newText","split","map","item","i","key","class","name","GameCreator","id","onClick","createGame","submitCallback","submitHandler","alert","ReactDOM","render","document","getElementById"],"mappings":"2OAMMA,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,MAAO,IACrB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,yDAONC,GACXC,KAAKC,SAAS,CAACL,MAAOG,EAAMG,OAAON,U,+BAInC,OACE,0BAAMO,SAAUH,KAAKI,cACnB,oDAEE,2BAAOC,KAAK,OAAOC,IAAM,IAAIV,MAAOI,KAAKL,MAAMC,MAAOW,SAAUP,KAAKH,aAAcW,QAAQ,SAF7F,YAMA,kBAACC,EAAD,W,GArBeC,IAAMC,YA2BvBF,E,kDACJ,WAAYf,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXiB,OAAQ,WAEV,EAAKC,cAAgB,EAAKA,cAAcf,KAAnB,gBALL,E,qDAShB,IAAIgB,EAAU,GAEdA,EAAQC,KAAK,4BAAQnB,MAAQ,WAAhB,YACbkB,EAAQC,KAAK,4BAAQnB,MAAQ,UAAhB,WACbkB,EAAQC,KAAK,4BAAQnB,MAAQ,QAAhB,SACbkB,EAAQC,KAAK,4BAAQnB,MAAQ,aAAhB,cAEb,IAAIoB,EAAO,GACa,WAArBhB,KAAKL,MAAMiB,OACZI,EAAO,+DAEoB,UAArBhB,KAAKL,MAAMiB,SACjBI,EAAO,0BAET,IAAIC,EAAUD,EAAKE,MAAO,MAAMC,KAAK,SAACC,EAAMC,GAAP,OAAa,uBAAGC,IAAKD,GAAID,MAC9D,OACE,6BACE,4BAAQG,MAAQ,UAAUhB,SAAUP,KAAKa,eACtCC,GAFL,eAIc,6BACZ,2BACGG,M,oCAKKlB,GAAO,IAAD,EAEEA,EAAMG,OAAfN,GAFO,EAEb4B,KAFa,EAEP5B,OACXI,KAAKC,SAAS,CAACW,OAAOhB,Q,GAxCFc,IAAMC,WA8CxBc,E,uKAEK,IAAD,OACN,OACE,yBAAKC,GAAK,aACR,yCAGA,4BAAQC,QAAW,kBAAM,EAAKC,eAA9B,eAGA,kBAACnC,EAAD,CAAUoC,eAAkB,kBAAI,EAAKC,sB,sCAKzCC,MAAM,S,mCAGNA,MAAM,Y,GAnBgBrB,IAAMC,WA+BhCqB,IAASC,OACP,kBAACR,EAAD,MACAS,SAASC,eAAe,W","file":"static/js/main.85830895.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\nclass NameForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    \r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});  \r\n  }\r\n  render() {\r\n    \r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Size of field n*n:\r\n          <input type=\"text\" min = \"3\" value={this.state.value} onChange={this.handleChange} pattern=\"\\d+\"/>   \r\n          Options:\r\n          \r\n        </label>\r\n        <OwnSelect></OwnSelect>\r\n      </form> \r\n    );\r\n  }\r\n}\r\n\r\nclass OwnSelect extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chosen: \"default\"\r\n    };\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n  }\r\n  render(){\r\n    \r\n    var entries = [];\r\n    \r\n    entries.push(<option value = \"default\">default</option>)\r\n    entries.push(<option value = \"sparse\">sparse</option>)\r\n    entries.push(<option value = \"full\">full</option>)\r\n    entries.push(<option value = \"minefield\">minefield</option>)\r\n\r\n    var desc = \"\";\r\n    if(this.state.chosen == \"default\"){\r\n      desc = \"68% of fields occupied + 4% assasins \\n example:\\n 5*5 => 17\"\r\n    }\r\n    else if(this.state.chosen == \"sparse\"){\r\n      desc = \"20% of fields occupied\"\r\n    }\r\n    let newText = desc.split ('\\n').map ((item, i) => <p key={i}>{item}</p>);\r\n    return (\r\n      <div>\r\n        <select class = \"content\" onChange={this.changeHandler}>\r\n          {entries}\r\n        </select>\r\n        description:<br/>\r\n        <p>\r\n          {newText}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  changeHandler(event){\r\n    \r\n    let {name, value} = event.target;\r\n    this.setState({chosen:value});\r\n    \r\n  }\r\n}\r\n\r\n\r\nclass GameCreator extends React.Component{\r\n  \r\n  render(){\r\n    return(\r\n      <div id = \"container\">\r\n        <h1>\r\n          Codenames\r\n        </h1>\r\n        <button onClick = {() => this.createGame()}>\r\n          Create Game\r\n        </button>\r\n        <NameForm submitCallback = {()=>this.submitHandler()}/>\r\n      </div>\r\n    );\r\n  }\r\n  submitHandler(){\r\n    alert(\"eee\")\r\n  }\r\n  createGame(){\r\n    alert(\"test\");\r\n  }\r\n  \r\n}\r\n\r\n/*\r\nclass Game extends React.Component{\r\n  \r\n\r\n\r\n}*/\r\n\r\nReactDOM.render(\r\n  <GameCreator />,\r\n  document.getElementById('root')\r\n);\r\n  \r\n\r\n/*\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n  \r\n  renderSquare(i) {\r\n    return (\r\n      <Square \r\n        value = {this.props.squares[i]}\r\n        onClick = {() => this.props.onClick(i)}\r\n      />  \r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      XIsNext: true,\r\n    };\r\n  }\r\n  handleClick(i){\r\n    const history = this.state.history.slice(0,this.state.stepNumber + 1);\r\n    const current = history[history.length-1];\r\n    const squares = current.squares.slice();\r\n \r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;    \r\n    }\r\n    squares[i] = this.state.XIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares:squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n      XIsNext: !this.state.XIsNext,\r\n    });\r\n    \r\n  }\r\n  jumpTo(i){\r\n    this.setState({\r\n      stepNumber:i,\r\n      XIsNext: (i%2) === 0,\r\n    });\r\n  }\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step,move) =>{\r\n      const desc = move ?\r\n        'Go to move #' + move:\r\n        'Go to game start';\r\n      return(\r\n        <li key ={move}>\r\n          <button onClick={() => this.jumpTo(move)}>\r\n            {desc}\r\n          </button>\r\n        </li>\r\n\r\n      );\r\n    });\r\n\r\n\r\n\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } \r\n    else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');    \r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares = {current.squares}\r\n            onClick = {(i)=>this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n  \r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n*/"],"sourceRoot":""}